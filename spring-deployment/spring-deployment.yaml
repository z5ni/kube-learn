apiVersion: apps/v1
kind: Deployment

metadata:
  name: spring-deployment

# Deployment 세부 정보
spec:
  replicas: 5                     # 생성할 Pod 수 (동시에 실행되는 복제본 개수)
  
  selector:                       # 어떤 라벨을 가진 Pod를 이 Deployment가 관리할지 지정
    matchLabels:
      app: backend-app            # app=backend-app 라벨이 있는 Pod만 관리 대상
  

  template:                       # 생성될 Pod의 템플릿 (이 구조를 기준으로 Pod가 생성)
    metadata:
      labels:
        app: backend-app          # Pod에 부여할 라벨 (selector와 반드시 일치해야 함)
    spec:
      containers:
        - name: spring-container
          image: spring-server:1.0
          ports:
            - containerPort: 8080
          imagePullPolicy: IfNotPresent


## 서버 개수 조절 방법 ##
# replicas 값 수정 후 아래 명령 실행
# `kubectl apply -f <file>.yaml`


## 새로운 이미지 버전 배포 방법 ##
# image 태그 변경 후 아래 명령 실행
# `kubectl apply -f <file>.yaml`


## Deployment의 Self-healing 기능 ##
# - 실행 중인 Pod가 비정상 종료되거나 삭제되면 자동으로 새로 생성됨
# - 컨트롤러가 항상 지정된 replicas 수를 유지하려고 감시함
# - 상태가 불량한 Pod는 제거되고 새로운 Pod로 교체됨


## Pod 수동 종료 테스트 ##
# 특정 Pod를 수동으로 삭제해도 Deployment가 자동으로 복구
# kubectl delete pod <pod-name>
# kubectl get pods 로 새로운 Pod가 생성되었는지 확인